{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","phone","address","className","src","alt","street","city","CardList","cardComponent","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","enhancers","compose","applyMiddleware","thunkMiddleware","devToolsExtension","f","rootReducer","combineReducers","action","Object","assign","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.112dddf9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id,phone,address}) => {\r\n    return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?set=set3&200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>Name: {name}</h2>\r\n                <p>Email: {email}</p>\r\n                <p>Phone Number: {phone}</p>\r\n                <p>Address: {address.street}, {address.city}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user) => {\r\n        return (\r\n        <Card \r\n        key={user.id} \r\n        id={user.id} \r\n        name={user.name} \r\n        email={user.email} \r\n        phone={user.phone}\r\n        address={user.address}    \r\n        />\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input\r\n            className=\"w-50 pa3 ba b00greeen bg-lightest-blue\" \r\n            type=\"search\" \r\n            placeholder=\"search robots\"   \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return(\r\n       <div className=\"tc\" style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n           {props.children}\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){//allow access to props\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){//Similar to try catch. If any error occur in the children this components run\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }else{\r\n            return this.props.children;//anything between the Error Boundary\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component{\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return <h1 className=\"f1\">RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {setSearchField,requestRobots} from '../actions.js';\r\nimport Header from '../components/Header';\r\n//You get this from the store in the index.js\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n       searchField: state.searchRobots.searchField,\r\n       robots: state.requestRobots.robots,\r\n       isPending: state.requestRobots.isPending,\r\n       error: state.requestRobots.error\r\n    }\r\n}\r\n//dispatch it triggers the action in the reducer\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        //requestRobots(dispatch) == dispatch(requestRobots())\r\n        //the reason why you do it this way is for redux-thunk to know to set dispatch as argument\r\n        onRequestRobots: () => dispatch(requestRobots()) \r\n    }\r\n}\r\n\r\n class App extends Component {\r\n\r\n\r\n    componentDidMount(){\r\n       this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render(){\r\n        const {searchField, onSearchChange,robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        if(isPending){\r\n            return <h1 className=\"tc\">Loading</h1>\r\n        }else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n//connect is a higher order function that returns another function\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);//so basically connect does something in the app component and then it returns the app component\r\n\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n   return { \r\n    type: CHANGE_SEARCH_FIELD,//the action taken. This is constant thats why is capitalize\r\n    payload: text //sent the data\r\n   }\r\n}\r\n\r\n//Asyncrousnous\r\n//Higher Order Function\r\n//Will work without redux-thunk\r\n//So the dispatch comes from the redux-thunk middleware\r\n//redux-thunk looks for actions that are functions. It knows if its a function then it is asyncrounous\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then( response => {\r\n            return response.json();\r\n        }).then( data => {dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data})\r\n        }).catch(error => ({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//the reason because request robots is a promise it has three state\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n//initial state for search\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n//initial state for request robots\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n//reducer\r\n//Initial value initialState and empty object\r\n//Parameters state and action\r\n//pure function must always return something\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            //Return First Parameter a new object. Second Parameter with the current State. Third Paramter Only Change this part of the state.\r\n             return Object.assign({},state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state, {error: action.payload,isPending:false});\r\n        default:\r\n            return state;    \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';//Allows you to connect to doms of the hmtl\r\nimport {Provider, connect} from 'react-redux';\r\nimport {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport registerServiceWorker from './serviceWorker';\r\nimport App from './containers/App';\r\nimport {searchRobots, requestRobots} from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst enhancers = compose(\r\n    //this is ordered so becareful of the order\r\n    applyMiddleware(thunkMiddleware,logger),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n)\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer,enhancers);\r\n\r\nReactDOM.render(\r\n    //Provider component allows you to pass down the store component throughtout the app \r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));"],"sourceRoot":""}